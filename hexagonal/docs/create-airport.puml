@startuml
skinparam monochrome true
skinparam BoxPadding 5
header Ports and Adapter POC
title Create Airport Use Case

hide footbox
actor HttpClient as user << User >>

box "REST Application" #FBFBFB
 participant "RestApi" as api << API >>
 participant "AirportValidator" as validator << RequestValidator >>
 participant "AirportView" as view << Converter >>
end box
box "Domain / Application" #FBFBFB
 participant "Airport" as airport << Model >>
 participant "AirportService" as service << Service >>
end box
box "Infrastructure" #FBFBFB
 participant "CountryRepository" as countryRepo << Repository >>
 participant "AirportRepository" as airportRepo << Repository >>
 participant "AirportDbo" as dbo << Converter >>
 participant "SlickDriver" as db << DatabaseDriver >>
end box

database PostgreSQL as pgdb

autonumber
user -> api: Post[AirportRequest]
api -> validator : validate(TupleN[AirportRequest])
validator -> airport ** : smart-new
validator --> api: IO[Airport]
api -> service: create(Airport)
service -> countryRepo : findByCode(airport.country.code)
countryRepo -> db: findByCode(code)
db -> pgdb : sql-select
db --> countryRepo: IO[CountryDbo]
countryRepo --> service: IO[CountryDbo]
service -> dbo: from(Airport, countryCode)
dbo --> service: IO[AirportDbo]
service -> airportRepo: insert(AirportDbo)
airportRepo -> db : insert(AirportDbo)
db -> pgdb : sql-insert
db --> airportRepo : IO[Id]
airportRepo --> service : IO[Airport]
service --> api : IO[Airport]
api -> view : from(Airport)
view --> api : IO[AirportView]
api -> api: buildContentLocation
api --> user : (Content-Location,AirportView)
@enduml